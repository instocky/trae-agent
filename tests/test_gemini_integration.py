#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å Trae Agent
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É GeminiClient –≤ —Ä–∞–º–∫–∞—Ö –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã Trae Agent
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–∏–º –ø—É—Ç—å –∫ trae_agent –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent.parent))

from trae_agent.utils.llm_client import LLMClient, LLMProvider
from trae_agent.utils.config import ModelParameters
from trae_agent.utils.llm_basics import LLMMessage, LLMResponse


def load_environment():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_path = Path(__file__).parent.parent / '.env'
    
    if env_path.exists():
        load_dotenv(env_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_path}")
    else:
        print(f"‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
        return False
    
    api_key = os.getenv('GOOGLE_API_KEY')
    if not api_key or api_key == 'your_google_gemini_api_key_here':
        print("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return False
        
    print(f"‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
    return True


def test_gemini_provider_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å Trae Agent")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑ .env
    model_params = ModelParameters(
        model="gemini-2.5-flash",
        api_key=os.getenv('GOOGLE_API_KEY', ''),
        max_tokens=int(os.getenv('MAX_TOKENS', 4096)),
        temperature=float(os.getenv('TEMPERATURE', 0.3)),
        top_p=1.0,
        top_k=40,
        parallel_tool_calls=True,
        max_retries=3
    )
    
    try:
        # –°–æ–∑–¥–∞–µ–º LLMClient —Å Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
        llm_client = LLMClient(
            provider=LLMProvider.GEMINI,
            model_parameters=model_params
        )
        
        print(f"‚úÖ LLMClient —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º: {llm_client.provider}")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        print("\nüìù –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        messages = [
            LLMMessage(role="user", content="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? –û—Ç–≤–µ—Ç—å –≤ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.")
        ]
        
        response: LLMResponse = llm_client.chat(
            messages=messages,
            model_parameters=model_params
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response.content}")
        print(f"üìä –ú–æ–¥–µ–ª—å: {response.model}")
        print(f"üìä Finish reason: {response.finish_reason}")
        
        if response.usage:
            print(f"üìä –¢–æ–∫–µ–Ω—ã: –≤—Ö–æ–¥={response.usage.input_tokens}, –≤—ã—Ö–æ–¥={response.usage.output_tokens}")
            if response.usage.reasoning_tokens > 0:
                print(f"üìä –¢–æ–∫–µ–Ω—ã —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è: {response.usage.reasoning_tokens}")
        
        # –¢–µ—Å—Ç 2: –° —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        print("\nüìù –¢–µ—Å—Ç 2: –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        messages_with_system = [
            LLMMessage(role="system", content="–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ."),
            LLMMessage(role="user", content="–ß—Ç–æ —Ç–∞–∫–æ–µ dependency injection –≤ Python?")
        ]
        
        response2 = llm_client.chat(
            messages=messages_with_system,
            model_parameters=model_params
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç —Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: {response2.content[:100]}...")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ function calling
        print("\nüìù –¢–µ—Å—Ç 3: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ function calling")
        supports_tools = llm_client.client.supports_tool_calling(model_params)
        print(f"‚úÖ Function calling –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {supports_tools}")
        
        # –¢–µ—Å—Ç 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–∏–∞–ª–æ–≥)
        print("\nüìù –¢–µ—Å—Ç 4: –î–∏–∞–ª–æ–≥")
        dialog_messages = [
            LLMMessage(role="user", content="–ù–∞–ø–∏—à–∏ –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é Python –¥–ª—è —Å–ª–æ–∂–µ–Ω–∏—è –¥–≤—É—Ö —á–∏—Å–µ–ª"),
            LLMMessage(role="assistant", content="def add(a, b):\n    return a + b"),
            LLMMessage(role="user", content="–î–æ–±–∞–≤—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–æ–≤")
        ]
        
        response3 = llm_client.chat(
            messages=dialog_messages,
            model_parameters=model_params
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –≤ –¥–∏–∞–ª–æ–≥–µ: {response3.content[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_provider_enum():
    """–¢–µ—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ LLMProvider enum"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ LLMProvider enum")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ GEMINI –¥–æ–±–∞–≤–ª–µ–Ω –≤ enum
    try:
        gemini_provider = LLMProvider.GEMINI
        print(f"‚úÖ LLMProvider.GEMINI: {gemini_provider.value}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
        gemini_from_string = LLMProvider("gemini")
        print(f"‚úÖ LLMProvider('gemini'): {gemini_from_string.value}")
        
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        all_providers = [provider.value for provider in LLMProvider]
        print(f"‚úÖ –í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: {all_providers}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ LLMProvider: {e}")
        return False


if __name__ == "__main__":
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not load_environment():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        sys.exit(1)
    
    # –¢–µ—Å—Ç enum
    enum_success = test_provider_enum()
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integration_success = test_gemini_provider_integration()
    
    print(f"\n{'='*60}")
    if enum_success and integration_success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("‚úÖ Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ Trae Agent")
        print("\nüí° –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: trae-cli run '–≤–∞—à–∞ –∑–∞–¥–∞—á–∞' --provider gemini")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
