#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Gemini API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º .env —Ñ–∞–π–ª–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç python-dotenv –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
"""

import os
from pathlib import Path
from dotenv import load_dotenv
from google import genai
from google.genai import types

def load_environment():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    # –ò—â–µ–º .env —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞
    env_path = Path(__file__).parent.parent / '.env'
    
    if env_path.exists():
        load_dotenv(env_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_path}")
    else:
        print(f"‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")
        print("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å GOOGLE_API_KEY")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.getenv('GOOGLE_API_KEY')
    if not api_key:
        print("‚ùå GOOGLE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return False
    
    if api_key == 'your_google_gemini_api_key_here':
        print("‚ùå –ó–∞–º–µ–Ω–∏—Ç–µ GOOGLE_API_KEY –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á –≤ .env —Ñ–∞–π–ª–µ!")
        return False
        
    print(f"‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {api_key[:10]}...{api_key[-4:]}")
    return True

def test_gemini_with_env():
    """–¢–µ—Å—Ç Gemini API —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ .env"""
    
    if not load_environment():
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
    api_key = os.getenv('GOOGLE_API_KEY')
    temperature = float(os.getenv('TEMPERATURE', 0.3))
    max_tokens = int(os.getenv('MAX_TOKENS', 4096))
    
    print(f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env:")
    print(f"   Temperature: {temperature}")
    print(f"   Max tokens: {max_tokens}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = genai.Client(api_key=api_key)
    
    try:
        # –¢–µ—Å—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–π –º–æ–¥–µ–ª—å—é
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Gemini 2.5 Flash —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ .env")
        
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents='–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –≤ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö, –∑–∞—á–µ–º –Ω—É–∂–Ω—ã LLM –∞–≥–µ–Ω—Ç—ã?',
            config=types.GenerateContentConfig(
                temperature=temperature,
                max_output_tokens=max_tokens,
            )
        )
        
        print("‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω!")
        print(f"üìù –û—Ç–≤–µ—Ç: {response.text}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
        if hasattr(response, 'usage_metadata') and response.usage_metadata:
            print(f"\nüìä –ú–µ—Ç—Ä–∏–∫–∏:")
            print(f"   –¢–æ–∫–µ–Ω—ã –ø—Ä–æ–º–ø—Ç–∞: {response.usage_metadata.prompt_token_count}")
            print(f"   –¢–æ–∫–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞: {response.usage_metadata.candidates_token_count}")
            print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {response.usage_metadata.total_token_count}")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_env_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env:")
    
    env_vars = [
        'GOOGLE_API_KEY',
        'DEBUG', 
        'LOG_LEVEL',
        'DEFAULT_PROVIDER',
        'MAX_STEPS',
        'TEMPERATURE',
        'MAX_TOKENS'
    ]
    
    for var in env_vars:
        value = os.getenv(var)
        if value:
            if 'API_KEY' in var:
                # –°–∫—Ä—ã–≤–∞–µ–º API –∫–ª—é—á–∏
                display_value = f"{value[:6]}...{value[-4:]}"
            else:
                display_value = value
            print(f"   ‚úÖ {var}: {display_value}")
        else:
            print(f"   ‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Gemini API —Å .env –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
    print("=" * 60)
    
    success = test_gemini_with_env()
    test_env_variables()
    
    print(f"\n{'='*60}")
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! Gemini API –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
    
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ò–∑—É—á–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ Trae Agent")
